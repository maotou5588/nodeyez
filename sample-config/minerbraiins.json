{
  "outputFile.comment": "The path to save the generated image",
  "outputFile.type": "string",
  "outputFile": "../imageoutput/minerbraiins.png",
  "dataDirectory.comment": "The base path for the directory to store hashrate history",
  "dataDirectory.type": "string",
  "dataDirectory": "../data/",
  "miners.comment": "An array of one or more miners",
  "miners.type": "array",
  "miners": [
    {
      "_config_summary.comment": "A brief description of this item for nodeyez-config app",
      "_config_summary.type": "string",
      "_config_summary": "{minerlabel} (miner at {mineraddress} enabled={enabled})",
      "enabled.comment": "Indicates whether this miner configuration is enabled for monitoring",
      "enabled.type": "boolean",
      "enabled": false,
      "minerlabel.comment": "A unique label to give this miner. It is used as part of the header on image.",
      "minerlabel.type": "string",
      "minerlabel": "",
      "mineraddress.comment": "(required) The ip or host address for your miner on your local lan, accessible from the host running the minerstatus script",
      "mineraddress.type": "string",
      "mineraddress": "127.0.0.1",
      "expectations.comment": "Define normal operating thresholds",
      "expectations.type": "object",
      "expectations": {
        "power.comment": "Expected thresholds for power usage in watts",
        "power.type": "object",
        "power": {
          "low.comment": "Minimum expected power usage, in watts",
          "low.type": "integer",
          "low": 800,
          "high.comment": "Maximum expected power usage, in watts",
          "high.type": "integer",
          "high": 1000
        },
        "hashrate.comment": "Expected thresholds for hashrate to monitor for",
        "hashrate.type": "object",
        "hashrate": {
          "low.comment": "Minimum expected hashrate, in MH/s",
          "low.type": "integer",
          "low": 11500000
        },
        "pools.comment": "Expected mining pool settings to monitor for",
        "pools.type": "array",
        "pools": [
          {
            "url.comment": "The url for a pool that is expected to be configured",
            "url.type": "string",
            "url": "stratum2+tcp://v2.us-east.stratum.slushpool.com",
            "user.comment": "The user for a pool that is expected to be configured",
            "user.type": "string",
            "user": "YourUsername.YourWorkername"
          }
        ]
      }
    }
  ],
  "width.comment": "The width, in pixels to generate the image.",
  "width.type": "integer",
  "width": 480,
  "height.comment": "The height, in pixels to generate the image.",
  "height.type": "integer",
  "height": 320,
  "sleepInterval.comment": "The amount of time, in seconds, the script should wait before data gathering and image creation again",
  "sleepInterval.type": "integer",
  "sleepInterval": 60,
  "colorTextFG.comment": "The color of the text expressed as a Hexadecimal color specifier",
  "colorTextFG.type": "color",
  "colorTextFG": "#ffffff",
  "colorHot.comment": "The color to show the temperature exceeding the hot threshold expressed as a Hexadecimal color specifier",
  "colorHot.type": "color",
  "colorHot": "#ffaa00",
  "colorDangerous.comment": "The color to show the temperature exceeding the dangerous threshold expressed as a Hexadecimal color specifier",
  "colorDangerous.type": "color",
  "colorDangerous": "#ff0000",
  "colorBackground.comment": "The background color of the image expressed as a Hexadecimal color specifier",
  "colorBackground.type": "color",
  "colorBackground": "#000000",
  "colorHashrateBox.comment": "The color of the border, average line and label backgrounds for the hashrate graph expressed as a Hexadecimal color specifier",
  "colorHashrateBox.type": "color",
  "colorHashrateBox": "#202020",
  "colorHashratePlot.comment": "The color to plot each hashrate value within the hashrate graph expressed as a Hexadecimal color specifier",
  "colorHashratePlot.type": "color",
  "colorHashratePlot": "#2f3fc5",
  "colorHashrateMA.comment": "The color to draw the hashrate moving average line expressed as a Hexadecimal color specifier",
  "colorHashrateMA.type": "color",
  "colorhashrateMA": "#40ff40"
}

