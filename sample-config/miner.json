{
    "backgroundColor.comment": "The background color of the image expressed as a Hexadecimal color specifier",
    "backgroundColor.fka": "colorBackground",
    "backgroundColor.type": "color",
    "backgroundColor": "#000000",
    "hashrateBoxColor.comment": "The color of the border, average line and label backgrounds for the hashrate graph expressed as a Hexadecimal color specifier",
    "hashrateBoxColor.fka": "colorHashrateBox",
    "hashrateBoxColor.type": "color",
    "hashrateBoxColor": "#202020",
    "hashrateLowValueColor.comment": "The color to chart hashrate values that are below expected threshold",
    "hashrateLowValueColor.type": "color",
    "hashrateLowValueColor": "#ffaa00",
    "hashrateLowValueTextColor.comment": "The color to draw the annotation text on the chart if hashrate value below threshold",
    "hashrateLowValueTextColor.type": "color",
    "hashrateLowValueTextColor": "#202020",
    "hashrateMovingAverageColor.comment": "The color to draw the hashrate moving average line expressed as a Hexadecimal color specifier",
    "hashrateMovingAverageColor.fka": "colorhashrateMA",
    "hashrateMovingAverageColor.type": "color",
    "hashrateMovingAverageColor": "#40ff40",
    "hashrateValueColor.comment": "The color to plot each hashrate value within the hashrate graph expressed as a Hexadecimal color specifier",
    "hashrateValueColor.fka": "colorHashratePlot",
    "hashrateValueColor.type": "color",
    "hashrateValueColor": "#2f3fc5",
    "headerText.comment": "The text to use in the header area",
    "headerText.type": "string",
    "headerText": "Miner Status",  
    "height.comment": "The height, in pixels to generate the image.",
    "height.type": "integer",
    "height": 320,    
    "interval.comment": "The amount of time, in seconds, the script should wait before data gathering and image creation again",
    "interval.fka": "sleepInterval",
    "interval.type": "integer",
    "interval": 60,
    "miners.comment": "The list of miners to report hashrate and check for tolerances",
    "miners.type": "array",
    "miners": [
        {
            "_config_summary.comment": "A brief description of this item for nodeyez-config app",
            "_config_summary.type": "string",
            "_config_summary": "{?enabled}{address}:{port} {type}",
            "enabled.comment": "Indicates whether this miner definition is enabled for reporting. If set to false, it will be skipped",
            "enabled.type": "boolean",      
            "enabled": false,
            "address.comment": "The IP address of the miner as reachable from where nodeyez is being run",
            "address.type": "string",
            "address": "127.0.0.1",
            "headerText.comment": "The text to use in the header area",
            "headerText.type": "string",
            "headerText": "Miner Status",      
            "port.comment": "The port the miner is listening for readonly requests on",
            "port.type": "integer",
            "port": 4028,
            "type.comment": "The type of miner. Only certain miner configurations are supported. Additional types will be supported as information is provided",
            "type.choices": {
                "detect": "Attempt to detect the miner type at runtime",
                "antminer-s19": "The miner is an Antminer S19 running stock firmware",
                "braiins": "The miner is running braiinsOS",
                "microbt": "The miner is a microbt unit running stock firmware"
            },
            "type.type": "string",
            "type": "detect",
            "expectations.comment": "Define expected normal operating thresholds. This does not configure the miner, but is used for indicating if a value is out of range.",
            "expectations.type": "object",      
            "expectations": {
                "Boards.comment": "Expected ambient and chip temperatures",
                "Boards.type": "object",        
                "Boards": {
                    "TempMin.comment": "Lower range of expected board temperature in Celsius",
                    "TempMin.type": "integer",
                    "TempMin": 40,
                    "TempMax.comment": "Upper range of expected board temperature in Celsius",
                    "TempMax.type": "integer",
                    "TempMax": 65,
                    "ChipTempMin.comment": "Lower range of expected chip temperature in Celsius",
                    "ChipTempMin.type": "integer",
                    "ChipTempMin": 40,
                    "ChipTempMax.comment": "Upper range of expected chip temperature in Celsius",
                    "ChipTempMax.type": "integer",
                    "ChipTempMax": 90
                },
                "Fans.comment": "Expected fan speeds",
                "Fans.type": "object",        
                "Fans": {
                    "Min.comment": "Lower range of expected fan speed, in RPMs",
                    "Min.type": "integer",
                    "Min": 1800,
                    "Max.comment": "Upper range of expected fan speed, in RPMs",
                    "Max.type": "integer",
                    "Max": 4800
                },
                "Hashrate.comment": "Expected hashrate thresholds",
                "Hashrate.type": "object",
                "Hashrate": {
                    "Min.comment": "Lower range of expected hashrare, in Mh/s",
                    "Min.type": "integer",
                    "Min": 61500000
                },
                "Pools.comment": "Expected pool settings",
                "Pools.type": "array",
                "Pools": [
                    {
                        "URL.comment": "The connection url that is expected for a pool",
                        "URL.type": "string",
                        "URL": "stratum+tcp://us-east.stratum.braiins.com:3333",
                        "User.comment": "The user that is expected for the pool. You may end with .* for any worker name",
                        "User.type": "string",
                        "User": "BobbiesHashingEmporium.*"
                    }
                ],
                "Power.comment": "Expected power consumption",
                "Power.type": "object",
                "Power": {
                    "Min.comment": "Lower range of power usage, in watts",
                    "Min.type": "integer",
                    "Min": 1875,
                    "Max.comment": "Lower range of power usage, in watts",
                    "Max.type": "integer",
                    "Max": 3400
                }
            }
        }
    ],
    "textColor.comment": "The color of the text expressed as a Hexadecimal color specifier",
    "textColor.fka": "colorTextFG",
    "textColor.type": "color",
    "textColor": "#ffffff",
    "warningColor.comment": "The color to show the temperature exceeding the hot threshold expressed as a Hexadecimal color specifier",
    "warningColor.fka": "colorHot",
    "warningColor.type": "color",
    "warningColor": "#ffaa00",
    "warningStatusBackgroundColor.comment": "The color to show the background of the status area when an expectation is not met",
    "warningStatusBackgroundColor.type": "color",
    "warningStatusBackgroundColor": "#ff0000",
    "warningStatusTextColor.comment": "The color to show the warning text when an expectation is not met",
    "warningStatusTextColor.type": "color",
    "warningStatusTextColor": "#ffffff",
    "width.comment": "The width, in pixels to generate the image.",
    "width.type": "integer",
    "width": 480  
}